<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-20T00:11:22+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BlueMoaiBlog</title><subtitle>このサイトはブルーモアイが適当にプログラミング系の話を書くブログです</subtitle><entry><title type="html">jekyllとGitHub Pages</title><link href="http://localhost:4000/article-1" rel="alternate" type="text/html" title="&lt;strong&gt;jekyllとGitHub Pages&lt;/strong&gt;" /><published>2018-09-19T15:48:00+09:00</published><updated>2018-09-19T15:48:00+09:00</updated><id>http://localhost:4000/jekyll-blog-1</id><content type="html" xml:base="http://localhost:4000/article-1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jekyllとは&quot;&gt;&lt;strong&gt;jekyllとは&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1-1.png&quot; alt=&quot;jekyll-logo&quot; /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://jekyllrb-ja.github.io/&quot;&gt;jekyll&lt;/a&gt;とは静的サイトジェネレータです。HTMLとMarkdown/textを自動で合体させ、GitHub Pagesで使えるファイル群に変換することができます。イメージとしてはこんな感じー&lt;br /&gt;
&lt;br /&gt; 
&lt;strong&gt;HTML + 記事を記述したMarkdown/text ⇒ 記事を記述したHTML&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
扱える言語／形式は以下になります。&lt;br /&gt;
HTML&lt;br /&gt;
css/Sass&lt;br /&gt;
JavaScript/CoffeeScript&lt;br /&gt;
Markdown/Text&lt;br /&gt;
&lt;br /&gt;
SassとCoffeeScriptのコンパイル機能もついており、変換時にcssとJavaScriptに出力されます。&lt;br /&gt;
静的サイト生成用のソフトであり、動的なことは行えません。データベースを使うことは基本的にできないでしょう。（外部のデータベースサービスを使えばいけるかも？）&lt;br /&gt;
&lt;br /&gt;
jekyllに制約はありますが、簡単にサイトを立ち上げることができます。ぜひ使ってみてください。
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;github-pagesとは&quot;&gt;&lt;strong&gt;GitHub Pagesとは&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1-2.png&quot; alt=&quot;GitHub-Pages-logo&quot; /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;とは、GitHubが提供している静的サイト構築サービスです。GitHubリポジトリ内のファイル群を読み込み、Webページを生成します。&lt;strong&gt;簡単&lt;/strong&gt;かつ &lt;strong&gt;無料&lt;/strong&gt;で利用できるのが利点です。&lt;br /&gt;
&lt;br /&gt;
GitHubを利用してページを生成するため、しばしばプロジェクトの公式サイトとしても利用されます。例えばRuby on RailsやBitcoin、Twitchなどです。他のサンプルは&lt;a href=&quot;https://jekyllrb.com/showcase/&quot;&gt;jekyll公式サイト&lt;/a&gt;から確認してください。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jekyllとgithub-pagesの使い方&quot;&gt;&lt;strong&gt;jekyllとGitHub Pagesの使い方&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1-3.png&quot; alt=&quot;GitHub-Pages-logo&quot; /&gt;
&lt;br /&gt;
jekyllとGitHub Pagesは、おおよそ以下の流れで利用します。&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;“jekyll new [blog_name]”でプロジェクト用ディレクトリ作成&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;レイアウト用HTMLや記事を記述したMarkdown/Textファイルを作成&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;“jekyll build”でGitHubへのpush用ディレクトリ”_site”を出力&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;“_site”をGitHubリポジトリに”push”&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;GitHub上で展開やドメイン設定を行う&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
　　　　&lt;strong&gt;完　成&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="プログラミング" /><category term="jekyll" /><category term="Windows" /><summary type="html">jekyllとは jekyllとは静的サイトジェネレータです。HTMLとMarkdown/textを自動で合体させ、GitHub Pagesで使えるファイル群に変換することができます。イメージとしてはこんな感じー HTML + 記事を記述したMarkdown/text ⇒ 記事を記述したHTML 扱える言語／形式は以下になります。 HTML css/Sass JavaScript/CoffeeScript Markdown/Text SassとCoffeeScriptのコンパイル機能もついており、変換時にcssとJavaScriptに出力されます。 静的サイト生成用のソフトであり、動的なことは行えません。データベースを使うことは基本的にできないでしょう。（外部のデータベースサービスを使えばいけるかも？） jekyllに制約はありますが、簡単にサイトを立ち上げることができます。ぜひ使ってみてください。 GitHub Pagesとは GitHub Pagesとは、GitHubが提供している静的サイト構築サービスです。GitHubリポジトリ内のファイル群を読み込み、Webページを生成します。簡単かつ 無料で利用できるのが利点です。 GitHubを利用してページを生成するため、しばしばプロジェクトの公式サイトとしても利用されます。例えばRuby on RailsやBitcoin、Twitchなどです。他のサンプルはjekyll公式サイトから確認してください。 jekyllとGitHub Pagesの使い方 jekyllとGitHub Pagesは、おおよそ以下の流れで利用します。 “jekyll new [blog_name]”でプロジェクト用ディレクトリ作成 　　　　　↓ レイアウト用HTMLや記事を記述したMarkdown/Textファイルを作成 　　　　　↓ “jekyll build”でGitHubへのpush用ディレクトリ”_site”を出力 　　　　　↓ “_site”をGitHubリポジトリに”push” 　　　　　↓ GitHub上で展開やドメイン設定を行う 　　　　　↓ 　　　　完　成</summary></entry><entry><title type="html">Windowsでjekyllを構築する方法</title><link href="http://localhost:4000/article-2" rel="alternate" type="text/html" title="&lt;strong&gt;Windowsでjekyllを構築する方法&lt;/strong&gt;" /><published>2018-09-19T11:23:00+09:00</published><updated>2018-09-19T11:23:00+09:00</updated><id>http://localhost:4000/jekyll-build-windows</id><content type="html" xml:base="http://localhost:4000/article-2">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rubyinstallerでrubyをインストール&quot;&gt;RubyInstallerでRubyをインストール&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1-1.png&quot; alt=&quot;a&quot; /&gt;
&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;でRubyをダウンロード、インストールします。&lt;br /&gt;
わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rubyとgemのインストールを確認&quot;&gt;rubyとgemのインストールを確認&lt;/h2&gt;
&lt;p&gt;インストール後、以下のコマンドでrubyとgemをインストールできたことを確認します。&lt;br /&gt;
gemとはrubyと供にインストールされたパッケージ管理ツールです。
インストールできていた場合、コマンドで各バージョンを確認できます。 
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/6fddf4299928e1b6e3014738bdab6cbc.js&quot;&gt;&lt;/script&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jekyllのインストール&quot;&gt;jekyllのインストール&lt;/h2&gt;
&lt;p&gt;gemを使ってjekyllをインストールします。
インストールできていた場合、コマンドでバージョンを確認できます。
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/d1dfd661a95e173ae75639dd4d1b0ad2.js&quot;&gt;&lt;/script&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
これでjekyllをWindowsで使う準備は終わりです。&lt;/p&gt;</content><author><name></name></author><category term="プログラミング" /><category term="jekyll" /><category term="Windows" /><summary type="html">RubyInstallerでRubyをインストール RubyInstallerでRubyをダウンロード、インストールします。 わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。 rubyとgemのインストールを確認 インストール後、以下のコマンドでrubyとgemをインストールできたことを確認します。 gemとはrubyと供にインストールされたパッケージ管理ツールです。 インストールできていた場合、コマンドで各バージョンを確認できます。 jekyllのインストール gemを使ってjekyllをインストールします。 インストールできていた場合、コマンドでバージョンを確認できます。 これでjekyllをWindowsで使う準備は終わりです。</summary></entry><entry><title type="html">Mac/Linuxでjekyllを構築する方法</title><link href="http://localhost:4000/article-3" rel="alternate" type="text/html" title="&lt;strong&gt;Mac/Linuxでjekyllを構築する方法&lt;/strong&gt;" /><published>2018-09-16T12:11:00+09:00</published><updated>2018-09-16T12:11:00+09:00</updated><id>http://localhost:4000/jekyll-build-mac,unix</id><content type="html" xml:base="http://localhost:4000/article-3">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rubyinstallerでrubyをインストール&quot;&gt;RubyInstallerでRubyをインストール&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1-1.png&quot; alt=&quot;RubyInstaller&quot; /&gt;
&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;でRubyをダウンロード、インストールします。&lt;br /&gt;
わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rubyとgemのインストールを確認&quot;&gt;rubyとgemのインストールを確認&lt;/h2&gt;
&lt;p&gt;インストール後、以下のコマンドでrubyとgemをインストールできたことを確認します。&lt;br /&gt;
gemとはrubyと供にインストールされたパッケージ管理ツールです。
インストールできていた場合、コマンドで各バージョンを確認できます。 
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/6fddf4299928e1b6e3014738bdab6cbc.js&quot;&gt;&lt;/script&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jekyllのインストール&quot;&gt;jekyllのインストール&lt;/h2&gt;
&lt;p&gt;gemを使ってjekyllをインストールします。
インストールできていた場合、コマンドでバージョンを確認できます。
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/d1dfd661a95e173ae75639dd4d1b0ad2.js&quot;&gt;&lt;/script&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
これでjekyllをWindowsで使う準備は終わりです。&lt;/p&gt;</content><author><name></name></author><category term="プログラミング" /><category term="jekyll" /><category term="Mac" /><category term="Linux" /><summary type="html">RubyInstallerでRubyをインストール RubyInstallerでRubyをダウンロード、インストールします。 わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。 rubyとgemのインストールを確認 インストール後、以下のコマンドでrubyとgemをインストールできたことを確認します。 gemとはrubyと供にインストールされたパッケージ管理ツールです。 インストールできていた場合、コマンドで各バージョンを確認できます。 jekyllのインストール gemを使ってjekyllをインストールします。 インストールできていた場合、コマンドでバージョンを確認できます。 これでjekyllをWindowsで使う準備は終わりです。</summary></entry><entry><title type="html">ブルーモアイの自己紹介</title><link href="http://localhost:4000/introduce" rel="alternate" type="text/html" title="&lt;strong&gt;ブルーモアイの自己紹介&lt;/strong&gt;" /><published>2018-09-15T22:38:34+09:00</published><updated>2018-09-15T22:38:34+09:00</updated><id>http://localhost:4000/introduce</id><content type="html" xml:base="http://localhost:4000/introduce">&lt;h2 id=&quot;自己紹介&quot;&gt;自己紹介&lt;/h2&gt;
&lt;p&gt;このサイトはjekyllとGitHub Pagesで構築されています。このページを作成した時点では、プログラミングを学び始めて半年程度の素人です。そのためこれを作成するために、よく詰まってしまうことがありました。しかし、ブログの世界はWord Pressが主体であるためか、jekyllのブログ構築情報が未だ簡素なものでした。&lt;br /&gt;
今後jekyllを使いたい方のために、わたしなりのブログ構築情報を記しておきます。&lt;br /&gt;
未だ経験不足のため、本ブログの情報にも不足や間違いがあるかとも思います。もし間違いがあれば、TwitterにまでDMして頂ければと思います。&lt;br /&gt;
稚拙ながら、みなさんの参考になればと思います。
&lt;br /&gt;
&lt;br /&gt;
　　　 ／￣￣￣＼&lt;br /&gt;
　　　/＿＿＿　 ∧&lt;br /&gt;
　　　L｜ /＿＼｜｜&lt;br /&gt;
　　 /&lt;em&gt;/　L＿／｜｜&lt;br /&gt;
　　/／　/　　 ｜｜&lt;br /&gt;
　 /(￣＼)　　 ｜｜&lt;br /&gt;
　｜_二二＿　　 L/&lt;br /&gt;
　｜ ￣￣　　　//&lt;br /&gt;
　｜　　　　 ／/&lt;br /&gt;
　 L＿＿＿&lt;/em&gt;／ ｜&lt;br /&gt;
　 ＼＿＿＿_／｜&lt;br /&gt;
　　/　　　　　＼&lt;br /&gt;
　 /　　　　/　 /&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">自己紹介 このサイトはjekyllとGitHub Pagesで構築されています。このページを作成した時点では、プログラミングを学び始めて半年程度の素人です。そのためこれを作成するために、よく詰まってしまうことがありました。しかし、ブログの世界はWord Pressが主体であるためか、jekyllのブログ構築情報が未だ簡素なものでした。 今後jekyllを使いたい方のために、わたしなりのブログ構築情報を記しておきます。 未だ経験不足のため、本ブログの情報にも不足や間違いがあるかとも思います。もし間違いがあれば、TwitterにまでDMして頂ければと思います。 稚拙ながら、みなさんの参考になればと思います。 　　　 ／￣￣￣＼ 　　　/＿＿＿　 ∧ 　　　L｜ /＿＼｜｜ 　　 //　L＿／｜｜ 　　/／　/　　 ｜｜ 　 /(￣＼)　　 ｜｜ 　｜_二二＿　　 L/ 　｜ ￣￣　　　// 　｜　　　　 ／/ 　 L＿＿＿／ ｜ 　 ＼＿＿＿_／｜ 　　/　　　　　＼ 　 /　　　　/　 /</summary></entry></feed>