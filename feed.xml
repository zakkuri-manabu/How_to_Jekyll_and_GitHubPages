<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-04T21:16:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BlueMoaiBlog</title><subtitle>このサイトはブルーモアイが適当にプログラミング系の話を書くブログです</subtitle><entry><title type="html">jekyllのフォルダ/ファイル構成と役割</title><link href="http://localhost:4000/article-7" rel="alternate" type="text/html" title="&lt;strong&gt;jekyllのフォルダ/ファイル構成と役割&lt;/strong&gt;" /><published>2018-11-02T12:00:00+09:00</published><updated>2018-11-02T12:00:00+09:00</updated><id>http://localhost:4000/jekyll-directory</id><content type="html" xml:base="http://localhost:4000/article-7">&lt;h2 id=&quot;jekyllのフォルダ構成&quot;&gt;jekyllのフォルダ構成&lt;/h2&gt;
&lt;p&gt;今回はjekyllで使われる各フォルダの役割について説明します。&lt;br /&gt;
“jekyll new [blog-name]”や”jekyll build”、”jekyll serve”で自動作成されたフォルダ以外も説明します。必要に応じて各フォルダを自分で作成してください。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-new-blog-nameでできるフォルダ&quot;&gt;“jekyll new [blog-name]”でできるフォルダ&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;_posts&lt;br /&gt;
.gitgnore&lt;br /&gt;
404.html&lt;br /&gt;
about.md&lt;br /&gt;
Gemfile&lt;br /&gt;
index.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll-buildでできるフォルダ&quot;&gt;“jekyll build”でできるフォルダ&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;.sass-cache&lt;br /&gt;
_site&lt;br /&gt;
config.yml&lt;br /&gt;
Gemfile.lock&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;自分で作成するフォルダ&quot;&gt;自分で作成するフォルダ&lt;/h2&gt;
&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyllの特別なフォルダ&quot;&gt;jekyllの特別なフォルダ&lt;/h2&gt;
&lt;p&gt;jekyllでは、所定のファイルを特定の名前のフォルダに入れることで、Liquidテンプレートで呼び出すことができます。&lt;/p&gt;

&lt;h3 id=&quot;_configyml&quot;&gt;_config.yml&lt;/h3&gt;
&lt;p&gt;jekyllの各種設定を操作するファイルです。&lt;/p&gt;

&lt;h3 id=&quot;_posts&quot;&gt;_posts&lt;/h3&gt;
&lt;h5 id=&quot;置くべきファイル&quot;&gt;置くべきファイル&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;・Markdownファイル&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・Textファイル&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
“_posts”フォルダは、Markdownファイルを置くためのフォルダです。&lt;br /&gt;
この”_posts”フォルダ内のMarkdownファイルは、”_layout”フォルダに置かれたHTMLファイルと統合されます。そして、Markdown内の文章を含めたHTMLファイルを生成し、”_site”フォルダに出力されます。&lt;/p&gt;

&lt;h3 id=&quot;_drafts&quot;&gt;_drafts&lt;/h3&gt;
&lt;h5 id=&quot;置くべきファイル-1&quot;&gt;置くべきファイル&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;・Markdownファイル(公開しない)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・Textファイル(公開しない)&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
“_drafts”フォルダは、つくりかけ記事のMarkdownファイルを置くためのフォルダです。このフォルダ内のMarkdownファイルは”_site”に出力されず、GitHub Pagesにも&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;“にも表示されません。&lt;br /&gt;
ただし、コマンドプロンプト及びターミナルで”jekyll serve –drafts”を起動し、ブラウザで”&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;“を開くと確認できます。&lt;/p&gt;

&lt;h3 id=&quot;_layouts&quot;&gt;_layouts&lt;/h3&gt;
&lt;h5 id=&quot;置くべきファイル-2&quot;&gt;置くべきファイル&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;・HTMLファイル&lt;/strong&gt; &lt;br /&gt;
&lt;br /&gt;
“_layouts”フォルダは、HTMLファイルを置くためのフォルダです。トップページのHTMLや、記事閲覧ページのHTMLを置くべきでしょう。&lt;br /&gt;
この”_layouts”フォルダに置かれたHTMLファイルは、”_posts”フォルダ内のMarkdownファイルに書かれたFront-matterによって呼び出されます。&lt;/p&gt;

&lt;h3 id=&quot;_includes&quot;&gt;_includes&lt;/h3&gt;
&lt;h5 id=&quot;置くべきファイル-3&quot;&gt;置くべきファイル&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;・HTMLファイル(ヘッダー/フッターなど)&lt;/strong&gt; &lt;br /&gt;
&lt;br /&gt;
“_includes”フォルダは、各ページで共有するHTMLファイルを置くためのフォルダです。&lt;br /&gt;
“_layouts”フォルダ内のHTMLファイルに、”{ % include [file-name].html % }”と入力することで、[flie-name].html内のhtmlを呼び出すことができます。&lt;/p&gt;

&lt;h3 id=&quot;_data&quot;&gt;_data&lt;/h3&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;

&lt;h3 id=&quot;その他のフォルダ&quot;&gt;その他のフォルダ&lt;/h3&gt;
&lt;p&gt;上記以外にも任意のファイルを置くことも可能です。&lt;br /&gt;
例えば画像を置くための”image”フォルダ、css/Sassを置くための”css”フォルダなど、自分で名前を決めることができます。&lt;br /&gt;
jekyllはこれらのファイルを、そのままの形で”_site”フォルダに反映させます。(SassやCoffeeScriptは変換されます)&lt;/p&gt;

&lt;h3 id=&quot;_site&quot;&gt;_site&lt;/h3&gt;

&lt;h2 id=&quot;jekyllの特別なファイル&quot;&gt;jekyllの特別なファイル&lt;/h2&gt;</content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Windows" /><summary type="html">jekyllのフォルダ構成 今回はjekyllで使われる各フォルダの役割について説明します。 “jekyll new [blog-name]”や”jekyll build”、”jekyll serve”で自動作成されたフォルダ以外も説明します。必要に応じて各フォルダを自分で作成してください。</summary></entry><entry><title type="html">GitHub Pagesのドメイン変更方法</title><link href="http://localhost:4000/article-6" rel="alternate" type="text/html" title="&lt;strong&gt;GitHub Pagesのドメイン変更方法&lt;/strong&gt;" /><published>2018-11-01T12:00:00+09:00</published><updated>2018-11-01T12:00:00+09:00</updated><id>http://localhost:4000/github%20pages-domain</id><content type="html" xml:base="http://localhost:4000/article-6"></content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Windows" /><summary type="html"></summary></entry><entry><title type="html">jekyllブログをGitHub Pagesで公開</title><link href="http://localhost:4000/article-5" rel="alternate" type="text/html" title="&lt;strong&gt;jekyllブログをGitHub Pagesで公開&lt;/strong&gt;" /><published>2018-10-19T15:48:00+09:00</published><updated>2018-10-19T15:48:00+09:00</updated><id>http://localhost:4000/deploy-github%20pages</id><content type="html" xml:base="http://localhost:4000/article-5">&lt;h2 id=&quot;github-pagesで公開&quot;&gt;GitHub Pagesで公開&lt;/h2&gt;
&lt;p&gt;前回(Win/Mac.Linux)制作したブログをGitHub Pagesで公開してみます。&lt;br /&gt;
GitHub Pagesでの公開には、Git・GitHub・jekyllの知識が必要です。このページではそれぞれを最低限しか説明しません。深く知りたい場合は外部サイトで学習してください。&lt;/p&gt;

&lt;h2 id=&quot;公開までの流れ&quot;&gt;公開までの流れ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;・jekyllで”_src”フォルダを作成(前回)&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;・Gitの準備&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;・GitHubの準備&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;・”_site”フォルダを”push”&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;gitの準備&quot;&gt;Gitの準備&lt;/h2&gt;
&lt;p&gt;Gitはバージョン管理システムです。おそらく、ほぼ全てのIT企業やプロジェクトで、Gitもしくは同様のシステムが使用されています。GitHub/GitHub Pagesでも必要になるので、まだ扱ったことの無い方は是日触ってください。&lt;/p&gt;

&lt;h3 id=&quot;gitのインストール&quot;&gt;Gitのインストール&lt;/h3&gt;
&lt;p&gt;まずはGitHubを使うためにGitをインストールします。&lt;a href=&quot;https://git-scm.com/book/ja/v2/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-Git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;Git公式&lt;/a&gt;を見てインストールしてください。&lt;/p&gt;

&lt;h2 id=&quot;githubの準備&quot;&gt;GitHubの準備&lt;/h2&gt;
&lt;p&gt;既にGitHubに登録している方は、こちらの章は読み飛ばして結構です。&lt;br /&gt;
まだの方はGitHubに登録してください。&lt;/p&gt;

&lt;h3 id=&quot;githubに登録&quot;&gt;GitHubに登録&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-1.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;にアクセスし、”Username”/”Email”/”Password”を入力して”Sign up for GitHub”を押してください。&lt;br /&gt;
“Username”は任意の名前を設定できますが、既にその名前が使用されていた場合はエラーが出ます。別の名前を検討してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-2.png&quot; alt=&quot;img&quot; /&gt;
“Create an accont”を押して次に進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-3.png&quot; alt=&quot;img&quot; /&gt;
無料・有料プランを選ぶページです。&lt;br /&gt;
無料と有料の違いですが、非公開のリポジトリが作れるかどうかです。後から変更することもできるので、まずは無料プランで始めることを勧めます。”Free”を選択してください。&lt;br /&gt;
ただし、学生の場合は特別な登録プランがあり、”Student Developer Pack”を選択することもできます。&lt;br /&gt;
他は触らずに”Continue”を押してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-4.png&quot; alt=&quot;img&quot; /&gt;
自己のスキルを登録するページです。&lt;br /&gt;
面倒でしたら”skip this step”でスキップしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-5.png&quot; alt=&quot;img&quot; /&gt;
以上を終わらすと、↑のような認証メールが届きます。”Verify email address”を押して認証を済ませてください。&lt;/p&gt;

&lt;h3 id=&quot;リポジトリの作成&quot;&gt;リポジトリの作成&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-6.png&quot; alt=&quot;img&quot; /&gt;
GitHub登録が終わっていると、&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;で自分のページを見ることができます。&lt;br /&gt;
“New repository”を押し、GitHub Pagesで使うリポジトリを作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-7.png&quot; alt=&quot;img&quot; /&gt;
“Repository name”に任意の名前を入力し、”Create repository”を押します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/article-5/article-5-8.png&quot; alt=&quot;img&quot; /&gt;
新たなリポジトリが出来上がりました。ここに表示されたURLに”_site”をアップロードすることで、GitHub Pagesで公開することができます。&lt;/p&gt;

&lt;h2 id=&quot;_srcフォルダをpush&quot;&gt;“_src”フォルダを”push”&lt;/h2&gt;
&lt;p&gt;前回作った”_site”フォルダをGitHubにアップロードします。&lt;br /&gt;
コマンドプロンプト/ターミナルを開き、Gitを操作していきます。&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Windows" /><summary type="html">GitHub Pagesで公開 前回(Win/Mac.Linux)制作したブログをGitHub Pagesで公開してみます。 GitHub Pagesでの公開には、Git・GitHub・jekyllの知識が必要です。このページではそれぞれを最低限しか説明しません。深く知りたい場合は外部サイトで学習してください。</summary></entry><entry><title type="html">Windowsでjekyllを使う方法</title><link href="http://localhost:4000/article-3" rel="alternate" type="text/html" title="&lt;strong&gt;Windowsでjekyllを使う方法&lt;/strong&gt;" /><published>2018-09-19T12:11:00+09:00</published><updated>2018-09-19T12:11:00+09:00</updated><id>http://localhost:4000/jekyll-build-windows</id><content type="html" xml:base="http://localhost:4000/article-3">&lt;h2 id=&quot;各種ソフトをインストール&quot;&gt;各種ソフトをインストール&lt;/h2&gt;
&lt;p&gt;jekyllのインストールにはRuby、Node.jsのインストールが必要です。先にこれらのインストールを行います。&lt;/p&gt;

&lt;h3 id=&quot;rubyinstallerでrubyをインストール&quot;&gt;RubyInstallerでRubyをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-1.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;でRubyをダウンロード、インストールします。&lt;br /&gt;
わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。&lt;/p&gt;

&lt;h3 id=&quot;nodejsをインストール&quot;&gt;Node.jsをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-2.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&lt;/a&gt;をダウンロード、インストールします。&lt;br /&gt;
これはCoffeeScriptを使えるようにするためです。&lt;/p&gt;

&lt;h3 id=&quot;エディタをインストール&quot;&gt;エディタをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-3.png&quot; alt=&quot;img&quot; /&gt;
エディタとは、HTMLやcss、Markdownファイルを編集するソフトです。本サイトでは&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;を使用しますが、他のエディタでもけっこうです。お好きなエディタをお使いください。以下にVS Codeのインストール方法を記述します。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-4.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code公式サイト&lt;/a&gt;からダウンロードしてください。&lt;br /&gt;
&lt;br /&gt;
また、Visual Studio CodeでMarkdownを編集するために、Markdownのプレビュー用の拡張機能をインストールすることをオススメします。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-5.png&quot; alt=&quot;img&quot; /&gt;
インストールしたVScodeを開き、拡張機能をインストールします。
左端リボンの拡張機能をクリック→検索窓に”Markdown preview”と入力→インストール&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-6.png&quot; alt=&quot;img&quot; /&gt;
Markdownファイルを開いた状態で、上部リボン右端に追加されたプレビューボタンを押します。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-7.png&quot; alt=&quot;img&quot; /&gt;
これでMarkdown Previewが起動します。&lt;/p&gt;

&lt;h2 id=&quot;jekyllのインストール&quot;&gt;jekyllのインストール&lt;/h2&gt;
&lt;p&gt;jekyllのインストールと操作にはコマンドプロンプトを使います。GUIを用いてjekyllを操作する方法もありますが、もっともオーソドックスな方法を本サイトでは使います。&lt;/p&gt;

&lt;h3 id=&quot;コマンドプロンプトの説明&quot;&gt;コマンドプロンプトの説明&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-8.png&quot; alt=&quot;img&quot; /&gt;
コマンドプロンプトとは、コマンドでWindowsPCを操作する黒いアレです。Windowsの検索機能で&lt;strong&gt;“コマンドプロンプト”&lt;/strong&gt;と検索すれば、呼び出せるはずです。&lt;br /&gt;
&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/82b4fccf006fcb803dca18539662d183.js&quot;&gt;&lt;/script&gt;
コマンドプロンプト及びターミナルの説明は、以下のルールにのっとって説明します。&lt;br /&gt;
&lt;strong&gt;・”$ “はコマンドの入力を示す&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・”&amp;gt; “はコマンドの出力を示す&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・出力が長文の場合は省略する&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubyとgemの確認&quot;&gt;Rubyとgemの確認&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/6fddf4299928e1b6e3014738bdab6cbc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;rubyとgemがインストールできたことを確認します。正常にインストールされた場合は、&lt;strong&gt;“#出力例”&lt;/strong&gt;のようにバージョンが表示されます。&lt;br /&gt;
gemとは、rubyと供にインストールされるパッケージ管理ツールです。&lt;/p&gt;

&lt;h3 id=&quot;jekyllのインストール-1&quot;&gt;jekyllのインストール&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/d1dfd661a95e173ae75639dd4d1b0ad2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;gemを使ってjekyllをインストールします。
インストールできていた場合、コマンドでバージョンを確認できます。&lt;/p&gt;

&lt;h2 id=&quot;jekyllの起動&quot;&gt;jekyllの起動&lt;/h2&gt;
&lt;p&gt;jekyllを使ってファイルを作成します。&lt;/p&gt;

&lt;h3 id=&quot;jekyll用ファイルの作成&quot;&gt;jekyll用ファイルの作成&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/5e2757d5eb52bc2d20e8812e5ca19f1b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;“jekyll new [blog-name]”によってjekyll用のファイル群を作成します。&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-9.png&quot; alt=&quot;img&quot; /&gt;
Cドライブのユーザー内に”[blog-name]”というファイルができているはずです。エクスプローラーで確認してください。画像では”jekyll_sample”という名前でファイルを設定しました。&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-10.png&quot; alt=&quot;img&quot; /&gt;
“bundle exec jekyll build”は、GitHub Pagesに”push”するためのファイル群”_site”を生成します。この”_site”を作った状態で”jekyll serve”を行うと、ブラウザでサイトのプレビューが見れます。&lt;br /&gt;
また、”jekyll serve”の起動中に各種ファイルを変更すると、&lt;strong&gt;jekyllが変更点を反映した”_site”を自動で再生成&lt;/strong&gt;します。プレビューを即座に確認できるため、&lt;strong&gt;“jekyll serve”を起動しながら作業することを勧めます&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;サンプルページの確認&quot;&gt;サンプルページの確認&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-11.png&quot; alt=&quot;img&quot; /&gt;
“jekyll serve”が起動している状態で、ブラウザのアドレス欄に”&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;“を入力してください。ここまでの操作がうまくいっていた場合、画像のようなサンプルページが表示されるはずです。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-12.png&quot; alt=&quot;img&quot; /&gt;
“Welcome to Jekyll!!”をクリックすることで、図のように記事を読むこともできます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
これでjekyllをWindowsで使う準備は終わりです。&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Windows" /><summary type="html">各種ソフトをインストール jekyllのインストールにはRuby、Node.jsのインストールが必要です。先にこれらのインストールを行います。</summary></entry><entry><title type="html">Mac/Linuxでjekyllを構築する方法</title><link href="http://localhost:4000/article-4" rel="alternate" type="text/html" title="&lt;strong&gt;Mac/Linuxでjekyllを構築する方法&lt;/strong&gt;" /><published>2018-09-19T11:23:00+09:00</published><updated>2018-09-19T11:23:00+09:00</updated><id>http://localhost:4000/jekyll-build-mac,unix</id><content type="html" xml:base="http://localhost:4000/article-4">&lt;h2 id=&quot;各種ソフトをインストール&quot;&gt;各種ソフトをインストール&lt;/h2&gt;
&lt;p&gt;jekyllのインストールにはRuby、Node.jsのインストールが必要です。先にこれらのインストールを行います。&lt;/p&gt;

&lt;h3 id=&quot;rubyinstallerでrubyをインストール&quot;&gt;RubyInstallerでRubyをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-1.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;RubyInstaller&lt;/a&gt;でRubyをダウンロード、インストールします。&lt;br /&gt;
わたしの場合は、WITH DEVKITから太字の推奨バージョンをダウンロードしました。&lt;/p&gt;

&lt;h3 id=&quot;nodejsをインストール&quot;&gt;Node.jsをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-2.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&lt;/a&gt;をダウンロード、インストールします。&lt;br /&gt;
これはCoffeeScriptを使えるようにするためです。&lt;/p&gt;

&lt;h3 id=&quot;エディタをインストール&quot;&gt;エディタをインストール&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-3.png&quot; alt=&quot;img&quot; /&gt;
エディタとは、HTMLやcss、Markdownファイルを編集するソフトです。本サイトでは&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;を使用しますが、他のエディタでもけっこうです。お好きなエディタをお使いください。以下にVS Codeのインストール方法を記述します。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-4.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code公式サイト&lt;/a&gt;からダウンロードしてください。&lt;br /&gt;
&lt;br /&gt;
また、Visual Studio CodeでMarkdownを編集するために、Markdownのプレビュー用の拡張機能をインストールすることをオススメします。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-5.png&quot; alt=&quot;img&quot; /&gt;
インストールしたVScodeを開き、拡張機能をインストールします。
左端リボンの拡張機能をクリック→検索窓に”Markdown preview”と入力→インストール&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-6.png&quot; alt=&quot;img&quot; /&gt;
Markdownファイルを開いた状態で、上部リボン右端に追加されたプレビューボタンを押します。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-7.png&quot; alt=&quot;img&quot; /&gt;
これでMarkdown Previewが起動します。&lt;/p&gt;

&lt;h2 id=&quot;jekyllのインストール&quot;&gt;jekyllのインストール&lt;/h2&gt;
&lt;p&gt;jekyllのインストールと操作にはコマンドプロンプトを使います。GUIを用いてjekyllを操作する方法もありますが、もっともオーソドックスな方法を本サイトでは使います。&lt;/p&gt;

&lt;h3 id=&quot;コマンドプロンプトの説明&quot;&gt;コマンドプロンプトの説明&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-8.png&quot; alt=&quot;img&quot; /&gt;
コマンドプロンプトとは、コマンドでWindowsPCを操作する黒いアレです。Windowsの検索機能で&lt;strong&gt;“コマンドプロンプト”&lt;/strong&gt;と検索すれば、呼び出せるはずです。&lt;br /&gt;
&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/82b4fccf006fcb803dca18539662d183.js&quot;&gt;&lt;/script&gt;
コマンドプロンプト及びターミナルの説明は、以下のルールにのっとって説明します。&lt;br /&gt;
&lt;strong&gt;・”$ “はコマンドの入力を示す&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・”&amp;gt; “はコマンドの出力を示す&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・出力が長文の場合は省略する&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubyとgemの確認&quot;&gt;Rubyとgemの確認&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/6fddf4299928e1b6e3014738bdab6cbc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;rubyとgemがインストールできたことを確認します。正常にインストールされた場合は、&lt;strong&gt;“#出力例”&lt;/strong&gt;のようにバージョンが表示されます。&lt;br /&gt;
gemとは、rubyと供にインストールされるパッケージ管理ツールです。&lt;/p&gt;

&lt;h3 id=&quot;jekyllのインストール-1&quot;&gt;jekyllのインストール&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/d1dfd661a95e173ae75639dd4d1b0ad2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;gemを使ってjekyllをインストールします。
インストールできていた場合、コマンドでバージョンを確認できます。&lt;/p&gt;

&lt;h2 id=&quot;jekyllの起動&quot;&gt;jekyllの起動&lt;/h2&gt;
&lt;p&gt;jekyllを使ってファイルを作成します。&lt;/p&gt;

&lt;h3 id=&quot;jekyll用ファイルの作成&quot;&gt;jekyll用ファイルの作成&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/zakkuri-manabu/5e2757d5eb52bc2d20e8812e5ca19f1b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;“jekyll new [blog-name]”によってjekyll用のファイル群を作成します。&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-9.png&quot; alt=&quot;img&quot; /&gt;
Cドライブのユーザー内に”[blog-name]”というファイルができているはずです。エクスプローラーで確認してください。画像では”jekyll_sample”という名前でファイルを設定しました。&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-10.png&quot; alt=&quot;img&quot; /&gt;
“bundle exec jekyll build”は、GitHub Pagesに”push”するためのファイル群”_site”を生成します。この”_site”を作った状態で”jekyll serve”を行うと、ブラウザでサイトのプレビューが見れます。&lt;br /&gt;
また、”jekyll serve”の起動中に各種ファイルを変更すると、&lt;strong&gt;jekyllが変更点を反映した”_site”を自動で再生成&lt;/strong&gt;します。プレビューを即座に確認できるため、&lt;strong&gt;“jekyll serve”を起動しながら作業することを勧めます&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;サンプルページの確認&quot;&gt;サンプルページの確認&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-3/article-3-11.png&quot; alt=&quot;img&quot; /&gt;
“jekyll serve”が起動している状態で、ブラウザのアドレス欄に”&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;“を入力してください。ここまでの操作がうまくいっていた場合、画像のようなサンプルページが表示されるはずです。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/img/article-3/article-3-12.png&quot; alt=&quot;img&quot; /&gt;
“Welcome to Jekyll!!”をクリックすることで、図のように記事を読むこともできます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
これでjekyllをWindowsで使う準備は終わりです。&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Mac" /><category term="Linux" /><summary type="html">各種ソフトをインストール jekyllのインストールにはRuby、Node.jsのインストールが必要です。先にこれらのインストールを行います。</summary></entry><entry><title type="html">jekyllとGitHub Pages</title><link href="http://localhost:4000/article-2" rel="alternate" type="text/html" title="&lt;strong&gt;jekyllとGitHub Pages&lt;/strong&gt;" /><published>2018-09-15T15:48:00+09:00</published><updated>2018-09-15T15:48:00+09:00</updated><id>http://localhost:4000/what-jekyll</id><content type="html" xml:base="http://localhost:4000/article-2">&lt;h2 id=&quot;jekyllの概要&quot;&gt;jekyllの概要&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-2/article-2-1.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://jekyllrb-ja.github.io/&quot;&gt;jekyll&lt;/a&gt;とは、Rubyで作られた静的サイトジェネレータです。jekyllはHTML、CSS、JavaScript、Markdownファイルを統合し、所定のフォルダを生成します。この生成されたフォルダをGitHubにPushすることで、GitHub Pagesでサイトを公開できます。&lt;br /&gt;
簡単かつ無料でブログやサイトを構築できるため、しばしばプロジェクトの公式サイトとしても利用されます。&lt;/p&gt;

&lt;h2 id=&quot;jekyllの機能&quot;&gt;jekyllの機能&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-2/article-2-3.png&quot; alt=&quot;img&quot; /&gt;
jekyllはHTML、CSS、JavaScript、Markdownファイルなどを読み込み、”_site”フォルダを生成します。この”_site”フォルダをGitHubにPushすることで、GitHub Pagesがサイトを表示できるようになります。&lt;br /&gt;
jekyllは”_site”フォルダを生成する際に、&lt;strong&gt;文章を書いたMarkdownファイル&lt;/strong&gt;と&lt;strong&gt;ページレイアウトを書いたHTMLファイル&lt;/strong&gt;を自動で統合し、&lt;strong&gt;文章をHTMLタグで囲ったHTMLファイル&lt;/strong&gt;を生成します。つまりページレイアウトを一度作ってしまえば、あとは文章を書くだけでブログを更新できます。便利。&lt;br /&gt;
&lt;br /&gt;
扱える言語／形式は以下になります。&lt;br /&gt;
&lt;strong&gt;・HTML&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・css/Sass&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・JavaScript/CoffeeScript&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・Markdown&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;・Liquidテンプレートエンジン&lt;/strong&gt;&lt;br /&gt;
※SassやCoffeeScriptは、”_site”フォルダを生成する際に自動でcssとJavaScriptに変換されます。&lt;br /&gt;
&lt;br /&gt;
静的サイト生成用のアプリであり、動的なことは行えません。データベースを使うことは基本的にできないと思われます。（外部のデータベースサービスを使えばいけるかも？）&lt;br /&gt;
&lt;br /&gt;
以上のように、jekyllとGitHub Pagesには制約があるものの、簡単にサイトの立ち上げができる有用なサービスです。ぜひ使ってみてください。&lt;/p&gt;

&lt;h2 id=&quot;github-pagesとは&quot;&gt;GitHub Pagesとは&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-2/article-2-4.png&quot; alt=&quot;img&quot; /&gt;
&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;とは、GitHubが提供している静的サイト構築サービスです。GitHubリポジトリ内のファイル群を読み込み、Webページを生成します。&lt;strong&gt;簡単&lt;/strong&gt;かつ&lt;strong&gt;無料&lt;/strong&gt;で利用できるのが利点です。&lt;br /&gt;
&lt;br /&gt;
GitHubを利用してページを生成するため、しばしばプロジェクトの公式サイトとしても利用されます。例えばRuby on RailsやBitcoin、Twitchなどです。他のサンプルは&lt;a href=&quot;https://jekyllrb.com/showcase/&quot;&gt;jekyll公式サイト&lt;/a&gt;から確認してください。&lt;/p&gt;

&lt;h2 id=&quot;jekyllとgithub-pages公開の流れ&quot;&gt;jekyllとGitHub Pages公開の流れ&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-2/article-2-5.png&quot; alt=&quot;img&quot; /&gt;
jekyllとGitHub Pagesは、おおよそ以下の流れで利用します。&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;1. 公開用ファイル群作成&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;2. レイアウト用HTMLやMarkdownファイルを作成&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;3. “_site”フォルダを生成&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;4. “_site”フォルダをGitHubリポジトリに”push”&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
&lt;strong&gt;5. GitHub上で展開やドメイン設定を行う&lt;/strong&gt;&lt;br /&gt;
　　　　　↓&lt;br /&gt;
　　　　&lt;strong&gt;完　成&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
以下、記事更新の際にはMarkdownファイルに文章を記述し、2～4を行うだけです。&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="jekyll" /><category term="Windows" /><summary type="html">jekyllの概要 jekyllとは、Rubyで作られた静的サイトジェネレータです。jekyllはHTML、CSS、JavaScript、Markdownファイルを統合し、所定のフォルダを生成します。この生成されたフォルダをGitHubにPushすることで、GitHub Pagesでサイトを公開できます。 簡単かつ無料でブログやサイトを構築できるため、しばしばプロジェクトの公式サイトとしても利用されます。</summary></entry><entry><title type="html">このサイトについて</title><link href="http://localhost:4000/article-1" rel="alternate" type="text/html" title="&lt;strong&gt;このサイトについて&lt;/strong&gt;" /><published>2018-09-14T22:38:34+09:00</published><updated>2018-09-14T22:38:34+09:00</updated><id>http://localhost:4000/introduce</id><content type="html" xml:base="http://localhost:4000/article-1">&lt;h2 id=&quot;あいさつ&quot;&gt;あいさつ&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/article-1/article-1.png&quot; alt=&quot;img&quot; /&gt;
このサイトはjekyllとGitHub Pagesで構築しました。&lt;br /&gt;
&lt;br /&gt;
今後jekyllやGitHub Pagesを使いたい方のために、わたしなりの情報をここに記しておきます。&lt;br /&gt;
未だ経験不足のため、本サイトの情報にも不足や間違いがあるかとも思います。もし間違いがあれば、お手数ですがTwitterにまでDMして頂ければと思います。&lt;br /&gt;
また、このサイトは未経験の素人も対象に書いており、意図的に専門用語を排除しています。（例：ディレクトリ→フォルダなど）その部分にもご留意頂ければと思います。
稚拙ながら、みなさんの参考になることを願っています。&lt;/p&gt;</content><author><name></name></author><summary type="html">あいさつ このサイトはjekyllとGitHub Pagesで構築しました。 今後jekyllやGitHub Pagesを使いたい方のために、わたしなりの情報をここに記しておきます。 未だ経験不足のため、本サイトの情報にも不足や間違いがあるかとも思います。もし間違いがあれば、お手数ですがTwitterにまでDMして頂ければと思います。 また、このサイトは未経験の素人も対象に書いており、意図的に専門用語を排除しています。（例：ディレクトリ→フォルダなど）その部分にもご留意頂ければと思います。 稚拙ながら、みなさんの参考になることを願っています。</summary></entry></feed>